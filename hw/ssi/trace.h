/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_HW_SSI_GENERATED_TRACERS_H
#define TRACE_HW_SSI_GENERATED_TRACERS_H

#include "trace/control.h"

extern TraceEvent _TRACE_ASPEED_SMC_FLASH_SET_SEGMENT_EVENT;
extern TraceEvent _TRACE_ASPEED_SMC_FLASH_READ_EVENT;
extern TraceEvent _TRACE_ASPEED_SMC_DO_SNOOP_EVENT;
extern TraceEvent _TRACE_ASPEED_SMC_FLASH_WRITE_EVENT;
extern TraceEvent _TRACE_ASPEED_SMC_READ_EVENT;
extern TraceEvent _TRACE_ASPEED_SMC_DMA_CHECKSUM_EVENT;
extern TraceEvent _TRACE_ASPEED_SMC_DMA_RW_EVENT;
extern TraceEvent _TRACE_ASPEED_SMC_WRITE_EVENT;
extern TraceEvent _TRACE_ASPEED_SMC_FLASH_SELECT_EVENT;
extern uint16_t _TRACE_ASPEED_SMC_FLASH_SET_SEGMENT_DSTATE;
extern uint16_t _TRACE_ASPEED_SMC_FLASH_READ_DSTATE;
extern uint16_t _TRACE_ASPEED_SMC_DO_SNOOP_DSTATE;
extern uint16_t _TRACE_ASPEED_SMC_FLASH_WRITE_DSTATE;
extern uint16_t _TRACE_ASPEED_SMC_READ_DSTATE;
extern uint16_t _TRACE_ASPEED_SMC_DMA_CHECKSUM_DSTATE;
extern uint16_t _TRACE_ASPEED_SMC_DMA_RW_DSTATE;
extern uint16_t _TRACE_ASPEED_SMC_WRITE_DSTATE;
extern uint16_t _TRACE_ASPEED_SMC_FLASH_SELECT_DSTATE;
#define TRACE_ASPEED_SMC_FLASH_SET_SEGMENT_ENABLED 1
#define TRACE_ASPEED_SMC_FLASH_READ_ENABLED 1
#define TRACE_ASPEED_SMC_DO_SNOOP_ENABLED 1
#define TRACE_ASPEED_SMC_FLASH_WRITE_ENABLED 1
#define TRACE_ASPEED_SMC_READ_ENABLED 1
#define TRACE_ASPEED_SMC_DMA_CHECKSUM_ENABLED 1
#define TRACE_ASPEED_SMC_DMA_RW_ENABLED 1
#define TRACE_ASPEED_SMC_WRITE_ENABLED 1
#define TRACE_ASPEED_SMC_FLASH_SELECT_ENABLED 1
#include "qemu/log-for-trace.h"


#define TRACE_ASPEED_SMC_FLASH_SET_SEGMENT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_SMC_FLASH_SET_SEGMENT) || \
    false)

static inline void _nocheck__trace_aspeed_smc_flash_set_segment(int cs, uint64_t reg, uint64_t start, uint64_t end)
{
    if (trace_event_get_state(TRACE_ASPEED_SMC_FLASH_SET_SEGMENT) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:aspeed_smc_flash_set_segment " "CS%d segreg=0x%"PRIx64" [ 0x%"PRIx64" - 0x%"PRIx64" ]" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cs, reg, start, end);
    }
}

static inline void trace_aspeed_smc_flash_set_segment(int cs, uint64_t reg, uint64_t start, uint64_t end)
{
    if (true) {
        _nocheck__trace_aspeed_smc_flash_set_segment(cs, reg, start, end);
    }
}

#define TRACE_ASPEED_SMC_FLASH_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_SMC_FLASH_READ) || \
    false)

static inline void _nocheck__trace_aspeed_smc_flash_read(int cs, uint64_t addr, uint32_t size, uint64_t data, int mode)
{
    if (trace_event_get_state(TRACE_ASPEED_SMC_FLASH_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:aspeed_smc_flash_read " "CS%d @0x%" PRIx64 " size %u: 0x%" PRIx64" mode:%d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cs, addr, size, data, mode);
    }
}

static inline void trace_aspeed_smc_flash_read(int cs, uint64_t addr, uint32_t size, uint64_t data, int mode)
{
    if (true) {
        _nocheck__trace_aspeed_smc_flash_read(cs, addr, size, data, mode);
    }
}

#define TRACE_ASPEED_SMC_DO_SNOOP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_SMC_DO_SNOOP) || \
    false)

static inline void _nocheck__trace_aspeed_smc_do_snoop(int cs, int index, int dummies, int data)
{
    if (trace_event_get_state(TRACE_ASPEED_SMC_DO_SNOOP) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:aspeed_smc_do_snoop " "CS%d index:0x%x dummies:%d data:0x%x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cs, index, dummies, data);
    }
}

static inline void trace_aspeed_smc_do_snoop(int cs, int index, int dummies, int data)
{
    if (true) {
        _nocheck__trace_aspeed_smc_do_snoop(cs, index, dummies, data);
    }
}

#define TRACE_ASPEED_SMC_FLASH_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_SMC_FLASH_WRITE) || \
    false)

static inline void _nocheck__trace_aspeed_smc_flash_write(int cs, uint64_t addr, uint32_t size, uint64_t data, int mode)
{
    if (trace_event_get_state(TRACE_ASPEED_SMC_FLASH_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:aspeed_smc_flash_write " "CS%d @0x%" PRIx64 " size %u: 0x%" PRIx64" mode:%d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cs, addr, size, data, mode);
    }
}

static inline void trace_aspeed_smc_flash_write(int cs, uint64_t addr, uint32_t size, uint64_t data, int mode)
{
    if (true) {
        _nocheck__trace_aspeed_smc_flash_write(cs, addr, size, data, mode);
    }
}

#define TRACE_ASPEED_SMC_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_SMC_READ) || \
    false)

static inline void _nocheck__trace_aspeed_smc_read(uint64_t addr, uint32_t size, uint64_t data)
{
    if (trace_event_get_state(TRACE_ASPEED_SMC_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:aspeed_smc_read " "@0x%" PRIx64 " size %u: 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr, size, data);
    }
}

static inline void trace_aspeed_smc_read(uint64_t addr, uint32_t size, uint64_t data)
{
    if (true) {
        _nocheck__trace_aspeed_smc_read(addr, size, data);
    }
}

#define TRACE_ASPEED_SMC_DMA_CHECKSUM_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_SMC_DMA_CHECKSUM) || \
    false)

static inline void _nocheck__trace_aspeed_smc_dma_checksum(uint32_t addr, uint32_t data)
{
    if (trace_event_get_state(TRACE_ASPEED_SMC_DMA_CHECKSUM) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:aspeed_smc_dma_checksum " "0x%08x: 0x%08x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr, data);
    }
}

static inline void trace_aspeed_smc_dma_checksum(uint32_t addr, uint32_t data)
{
    if (true) {
        _nocheck__trace_aspeed_smc_dma_checksum(addr, data);
    }
}

#define TRACE_ASPEED_SMC_DMA_RW_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_SMC_DMA_RW) || \
    false)

static inline void _nocheck__trace_aspeed_smc_dma_rw(const char * dir, uint32_t flash_addr, uint32_t dram_addr, uint32_t size)
{
    if (trace_event_get_state(TRACE_ASPEED_SMC_DMA_RW) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:aspeed_smc_dma_rw " "%s flash:@0x%08x dram:@0x%08x size:0x%08x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , dir, flash_addr, dram_addr, size);
    }
}

static inline void trace_aspeed_smc_dma_rw(const char * dir, uint32_t flash_addr, uint32_t dram_addr, uint32_t size)
{
    if (true) {
        _nocheck__trace_aspeed_smc_dma_rw(dir, flash_addr, dram_addr, size);
    }
}

#define TRACE_ASPEED_SMC_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_SMC_WRITE) || \
    false)

static inline void _nocheck__trace_aspeed_smc_write(uint64_t addr, uint32_t size, uint64_t data)
{
    if (trace_event_get_state(TRACE_ASPEED_SMC_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:aspeed_smc_write " "@0x%" PRIx64 " size %u: 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr, size, data);
    }
}

static inline void trace_aspeed_smc_write(uint64_t addr, uint32_t size, uint64_t data)
{
    if (true) {
        _nocheck__trace_aspeed_smc_write(addr, size, data);
    }
}

#define TRACE_ASPEED_SMC_FLASH_SELECT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_SMC_FLASH_SELECT) || \
    false)

static inline void _nocheck__trace_aspeed_smc_flash_select(int cs, const char * prefix)
{
    if (trace_event_get_state(TRACE_ASPEED_SMC_FLASH_SELECT) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:aspeed_smc_flash_select " "CS%d %sselect" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cs, prefix);
    }
}

static inline void trace_aspeed_smc_flash_select(int cs, const char * prefix)
{
    if (true) {
        _nocheck__trace_aspeed_smc_flash_select(cs, prefix);
    }
}
#endif /* TRACE_HW_SSI_GENERATED_TRACERS_H */
